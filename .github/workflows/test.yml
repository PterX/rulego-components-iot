name: Test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      # OPC UA 模拟器服务 - 使用正确的端口映射
      opcua-simulator:
        image: mcr.microsoft.com/iotedge/opc-plc:latest
        ports:
          - 53530:50000  # 映射到测试期望的端口
          - 8080:8080    # Web 服务端口
        options: >-
          --health-cmd "timeout 10 bash -c '</dev/tcp/localhost/50000' || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
        env:
          # OPC UA 模拟器配置
          OPCPLC_AUTOACCEPT: true
          OPCPLC_UNSECURETRANSPORT: true

      # Modbus 模拟器服务暂时禁用 - 模拟器启动不稳定，先跳过测试
      # modbus-simulator:
      #   image: techplex/modbus-sim:latest
      #   ports:
      #     - 1502:1502  # 注意：这个模拟器使用端口 1502
      #   options: >-
      #     --health-cmd "timeout 10 bash -c '</dev/tcp/localhost/1502' || exit 1"
      #     --health-interval 30s
      #     --health-timeout 10s
      #     --health-retries 6

    strategy:
      matrix:
        go-version: [1.22, 1.23, 1.24]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Wait for services to be ready
      run: |
        echo "等待服务就绪..."
        
        # 等待 OPC UA 模拟器启动
        if [ "$SKIP_OPCUA_TESTS" != "true" ]; then
          echo "等待 OPC UA 模拟器启动 (端口 53530)..."
          timeout 120 sh -c 'until nc -z localhost 53530; do echo "等待中..."; sleep 3; done'
          echo "OPC UA 模拟器已就绪!"
          
          # 验证 OPC UA 服务器响应
          echo "验证 OPC UA 服务器响应..."
          timeout 30 sh -c 'until curl -sf http://localhost:8080/pn.json > /dev/null 2>&1; do echo "等待 Web 接口..."; sleep 2; done' || echo "Web 接口可能不可用，继续测试"
        else
          echo "跳过 OPC UA 服务检查"
        fi
        
        # Modbus 测试已跳过 - 模拟器启动不稳定
        echo "跳过 Modbus 服务检查 (SKIP_MODBUS_TESTS=true)"

    - name: Run tests with coverage
      env:
        # 启用集成测试
        INTEGRATION_TESTS: true
        
        # OPC UA 配置
        OPCUA_ENDPOINT: opc.tcp://localhost:53530
        OPCUA_SERVER_URL: opc.tcp://localhost:53530/OPCUA/SimulationServer
        
        # Modbus 配置
        MODBUS_SERVER_HOST: localhost
        MODBUS_SERVER_PORT: 1502
        
        # 测试控制环境变量 - 根据服务可用性动态设置
        SKIP_OPCUA_TESTS: false     # OPC UA 有模拟器，可以测试
        SKIP_MODBUS_TESTS: true     # 暂时跳过 Modbus 测试（模拟器不稳定）
        
        # 其他 IoT 协议暂时跳过（需要物理设备或特殊设置）
        SKIP_BACNET_TESTS: true     # BACnet 需要物理设备
        SKIP_IEC61850_TESTS: true   # IEC61850 需要特殊设置
        SKIP_S7_TESTS: true         # Siemens S7 需要物理设备
        SKIP_ETHERNET_IP_TESTS: true # Ethernet/IP 需要物理设备
        
        # 测试超时设置
        TEST_TIMEOUT: 45s
      run: |
        # 运行测试并生成覆盖率报告
        go test -v -race -timeout=8m -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
